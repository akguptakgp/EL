from sets import Set

# read the parse file generated by standford parser
f = open('output_task3_PARSE.txt', 'r')
if(f!=None):
    str1=f.read().splitlines()
    arr=""
    for line in str1:
        arr+=line
    ar=arr.replace('','')
else:
    print "error opening the file"

# parse the file to populate trees
DEP_TREE=[]
itr=0
while(ar.find("(. .)))")!=-1):
    itr+=1
    if(itr!=1):
        tmp=num1
    num1=ar.find("(ROOT  (")
    if(itr!=1):
        DEP_TREE.append(ar[(ar[:num1].find(". .)))")+6):num1])
    num2=ar.find("(. .)))")
    temp1=ar[num1:num2]
    ar=ar[num2+1:len(ar)]
DEP_TREE.append(ar[(ar[:num1].find(". .)))")+6):])

print DEP_TREE  
print
print

for i in DEP_TREE[0].split(')'):
    if(i!=''):
        p=i.split('(')
        relation=p[0]
        first=p[1].split(',')[0]
        second=p[1].split(',')[1]
        print relation,first,second    

# depgraph(DEP_TREE[1],1)
# commonEdge=0
# for common in Set(list1[0].keys()).intersection(Set(list1[1].keys())):
#     if(list1[0][common]>=list1[1][common]):
#         commonEdge+=list1[1][common]
#     else:
#         commonEdge+=list1[0][common]

# print "Number of common edges in dependency tree are :",commonEdge        
#             